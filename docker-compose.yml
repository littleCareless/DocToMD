version: "3.8"

services:
  frontend:
    networks:
      - app-network
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - DOCKER_CLIENT_TIMEOUT=120
      - COMPOSE_HTTP_TIMEOUT=120
    depends_on:
      - backend

  backend:
    networks:
      - app-network
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./backend:/app
      - ./debug:/app/debug
    env_file:
      - ./.env
    environment:
      # OpenAI configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL}
      # Redis configuration
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT}/0
      # Flask configuration
      - FLASK_APP=app.py
      - FLASK_ENV=development # 改为开发环境
      - FLASK_DEBUG=1
      - BACKEND_PORT=${BACKEND_PORT}
      # Docker configuration
      - DOCKER_CLIENT_TIMEOUT=120
      - COMPOSE_HTTP_TIMEOUT=120
    dns:
      - 8.8.8.8
      - 1.1.1.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: flask run --host=0.0.0.0 --port=${BACKEND_PORT} --debug

  celery_worker:
    networks:
      - app-network
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./debug:/app/debug
    env_file:
      - ./.env
    environment:
      # OpenAI configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL}
      # Redis configuration
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT}/0
      # Port configuration
      - BACKEND_PORT=${BACKEND_PORT}
      # Docker configuration
      - DOCKER_CLIENT_TIMEOUT=120
      - COMPOSE_HTTP_TIMEOUT=120
    dns:
      - 8.8.8.8
      - 1.1.1.1
    depends_on:
      - redis
      - backend
    command: celery -A app.celery worker --loglevel=info

  redis:
    networks:
      - app-network
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --port ${REDIS_PORT}
    volumes:
      - redis_data:/data

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
